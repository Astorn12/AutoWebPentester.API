using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using AutoWebPentester.API.Data.PentestRepository;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.Data.WebSiteRepositories;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Logic.AllWithPentests.Caretakers;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs.JsonConvertClasses;
using AutoWebPentester.API.Model;
using Newtonsoft.Json;

namespace AutoWebPentester.API.Services.PentestServices
{
    public class PentestService : IPentestService
    {
        private IPentestRepository _repo;
        private IWebSiteRepository _webRepo;
        private readonly IResourceRepository _resourceRepo;
        private readonly IMapper _mapper;

        public PentestService(IPentestRepository repo, IWebSiteRepository webRepo, IResourceRepository resourceRepo,IMapper mapper )
        {
            this._resourceRepo = resourceRepo;
            this._mapper = mapper;
            this._webRepo = webRepo;
            this._repo = repo;
        }

        public async Task<PentestOutcomeDto> CarryOnPentest(FilledPentestDto filledPentest, int userId)
        {
            PentestSketch pentestSketch = await _repo.getPentestSketch(filledPentest.Id);
            var t= JsonConvert.DeserializeObject<Input>(filledPentest.Input,new JsonSerializerSettings{TypeNameHandling=TypeNameHandling.Auto});
            Outcome outcome=await pentestSketch.Caretaker.CarryOnPentest(await _webRepo.GetOrAddWebsite(filledPentest.WebsiteUrl, userId),this._resourceRepo,
                t,userId);

                Pentest pentest= new Pentest();
                pentest.Date=DateTime.Now;
                pentest.PentestSketchId=pentestSketch.Id;
               // pentest.Input=t;
                pentest.Outcome=outcome;
                pentest.UserId=userId;
                WebSite webSite=await this._webRepo.GetOrAddWebsite(filledPentest.WebsiteUrl,userId);
                pentest.WebsiteId= webSite.Id;
                pentest._Input=filledPentest.Input;

                await this._repo.AddPentest(pentest);
                
            var tmp= this._mapper.Map<PentestOutcomeDto>(outcome);
            return tmp;
        }


      

       

        class Odpowiednik{
            public string Name { get; set; }

            public Odpowiednik(string name)
            {
                Name = name;
            }

            public string Type { get; set; }
            
        }
        public async Task<int> GetNumberOfPentestsWithTag(int id)
        {
            return await _repo.GetNumberOfPentestsWithTag(id);
        }

        public async Task<List<RequirementDto>> GetPentestResources(int pentestId, int websiteId)
        {
            return await this._repo.GetPentestResources(pentestId, websiteId);
        }

        public async Task<IEnumerable<PentestSketch>> GetPentestsByTag(int tagId)
        {
            return await _repo.GetPentestsByTag(tagId);
        }

        public async Task<PentestSketch> GetPentestSketch(int pentestSketch)
        {
            return await _repo.getPentestSketch(pentestSketch);
        }

        public async Task<PentestSketchDetailsDto> GetPentestSketchDetailsDto(int pentestSketch, int websiteId,int userId)
        {
            return await _repo.GetPentestSketchDetailsDto(pentestSketch, websiteId,_resourceRepo,userId);
        }

        public async Task<IEnumerable<PentestSketch>> GetPentestsProvidedResource(int resourceId)
        {
            return await _repo.GetPentestsProvidedResource(resourceId);
        }

        public async Task<IEnumerable<TagKind>> GetTagKinds()
        {
            return await _repo.GetTagKinds();
        }


        public async Task<IEnumerable<Tag>> GetTags(int tagKindId)
        {
            return await _repo.GetTags(tagKindId);
        }

        public async Task<WebSite> GetWebsite(string url)
        {
            return await _repo.GetWebsite(url);
        }

        public async Task<List<Pentest>> GetPentestHistory(int websiteId)
        {
            return await this._repo.GetPentestHistory(websiteId);
        }

        public async Task<Pentest> GetPentest(int pentestId)
        {
            return await this._repo.GetPentest(pentestId);
        }

        public async Task<int> GetNumberOfPentests(int websiteId)
        {
            return await this._repo.GetNumberOfPentests(websiteId);
        }

        public async Task<WebSite> GetWebsite(int id)
        {
            return await _repo.GetWebsite(id);
        }

        public async Task<List<Pentest>> GetPentestHistory(int websiteId, int userId)
        {
            return await this._repo.GetPentestHistory(websiteId,userId);
        }

        public async Task<int> GetNumberOfPentests(int websiteId, int id)
        {
             return await this._repo.GetNumberOfPentests(websiteId,id);
        }
    }
}