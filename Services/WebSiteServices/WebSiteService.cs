using System.Collections.Generic;
using System.Threading.Tasks;
using AutoWebPentester.API.Data.WebSiteRepositories;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Services.RequestServices;
using Microsoft.AspNetCore.Mvc;

namespace AutoWebPentester.API.Services.WebSiteServices
{
    public class WebSiteService : IWebSiteService
    {
        private readonly IWebSiteRepository _repo;
        private readonly IRequestService _requestService;

        public WebSiteService(IWebSiteRepository repo, IRequestService requestService)
        {
            this._requestService = requestService;
            _repo = repo;
        }

        public async Task<WebSite> Add(WebSite webSite, int userId)
        {
            return await _repo.AddWebSite(webSite, userId);
        }



        public async Task<IEnumerable<WebSite>> GetAll(int userId)
        {

            return await _repo.GetAll(userId);
        }



       
    

        public async Task<WebSite> GetOrAdd(string websiteUrl, int userId)
        {
            return await this._repo.GetOrAddWebsite(websiteUrl, userId);
        }

        public async Task<IEnumerable<WebSite>> GetRecent(int userId)
        {
            return await this._repo.GetRecent(userId);
        }

        public Task<WebSite> Remove(WebSite webSite, int userId)
        {
            return _repo.Remove(webSite, userId);
        }

        public async Task<WebsiteDetails2Dto> GetDetails(int webSiteId, int userId)
        {
            WebsiteDetails2Dto details= new WebsiteDetails2Dto();

            WebSite website= await this.Get(webSiteId);

            RequestDto requestDto= new RequestDto();
            requestDto.WebsiteUrl= website.Url;
            requestDto.Method="Get";
            requestDto.Protocol="http";
        


            ResponseDto response= await this._requestService.MakeRequest(requestDto,userId);
            
            
            details.Id=webSiteId;
            details.Url=website.Url;
            details.Content=response.Body;
            details.Headers= response.Headers;

            return details;
        }

        public async Task<WebSite> Get(int websiteId)
        {
            return await this._repo.Get(websiteId);   
        }

        public async Task<UserWebSite> DeleteWebsite(int websiteId, int userId)
        {
           return await this._repo.DeleteWebsite(websiteId, userId);
        }

        public  void RestartDb()
        {
             this._repo.ReloadDb();
        }
    }
}