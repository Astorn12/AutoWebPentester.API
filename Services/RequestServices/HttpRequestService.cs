using System.Net.Http;
using System.Threading.Tasks;
using AutoWebPentester.API.DTOs;

namespace AutoWebPentester.API.Services.RequestServices
{
    public class HttpRequestService
    {
          private HttpClient http;
          public HttpRequestService()
          {
            this.http= new HttpClient();
          }
        public async Task<HttpResponseMessage> MakeRequestForPentest(RequestDto requestDto){
            HttpRequestMessage request = new HttpRequestMessage();


            request.Method = toHttpMethod(requestDto.Method);

            if (requestDto.WebsiteUrl != null)
            {
                if(requestDto.Url==null) requestDto.Url="";
                request.RequestUri = new System.Uri(requestDto.Protocol+"://"+requestDto.WebsiteUrl+requestDto.Url);
            }
            if (requestDto.Headers != null)
            {
                foreach (HeaderDto header in requestDto.Headers)
                {
                    //if(header.Name==null)header.Name="";
                    // if(header.Values==null)header.Values= new List<string>();
                    if (header.Name != null && header.Values != null)
                        request.Headers.Add(header?.Name, header.Values);
                }
            }

            if (requestDto.Body != null)
            {
                //request.Content=  new StringContent(requestDto.Body,Encoding.UTF8, "application/x-www-form-urlencoded");
            }
            //request.Content= new StringContent(requestDto.Body,Encoding.UTF8, "application/x-www-form-urlencoded");





            HttpResponseMessage response = await this.http.SendAsync(request);

           return response;
        }

         private HttpMethod toHttpMethod(string name)
        {
            switch (name)
            {
                case "Post":
                    return HttpMethod.Post;
                case "Get":
                    return HttpMethod.Get;
                case "GET":
                    return HttpMethod.Get;
                case "Delete":
                    return HttpMethod.Delete;
                case "Trace":
                    return HttpMethod.Trace;
                case "Put":
                    return HttpMethod.Put;
                case "Patch":
                    return HttpMethod.Patch;
                case "Options":
                    return HttpMethod.Options;
                case "Head":
                    return HttpMethod.Head;
            }
            throw new NotFoundException("Metoda " + name + " najprawdopodobniej nie jest metodą Http i nie można jej zmapować na typ HttpMethod");
        }
    }
}