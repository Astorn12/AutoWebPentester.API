using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using AutoMapper;
using AutoWebPentester.API.Data.HeaderRepositories;
using AutoWebPentester.API.Data.RequestRepository;
using AutoWebPentester.API.Data.WebSiteRepositories;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Model;
using Microsoft.AspNetCore.Mvc;

namespace AutoWebPentester.API.Services.RequestServices
{
    public class RequestService : IRequestService
    {
        private HttpClient _http;
        private IHeaderRepository _headerRepo;
        private IRequestRepository _requestRepository;
        private IMapper _mapper;
        private IWebSiteRepository _webSiteRepo;
        public RequestService(IHeaderRepository headerRepo, IRequestRepository requestRepository, IWebSiteRepository webSiteRepo, IMapper mapper)
        {
            this._webSiteRepo = webSiteRepo;
            this._mapper = mapper;
            this._requestRepository = requestRepository;
            this._headerRepo = headerRepo;
            this._http = new HttpClient();
        }

        public async Task<IEnumerable<HttpConversation>> GetAllConversations(int userId)
        {
            return await this._requestRepository.GetAllConversations(userId);
        }

        public async Task<IEnumerable<Header>> GetAllHeaders()
        {
            return await _headerRepo.GetAll();
        }

        public async Task<IEnumerable<HttpConversation>> GetConversationWithWebsite(string websiteUrl, int userId)
        {
            return await this._requestRepository.GetConversationWithWebsite(websiteUrl, userId);
        }



        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderAllPossibleValues(int headerId)
        {
            return await _headerRepo.GetHeaderAllPossibleValues(headerId);
        }

        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValuesNeutral(int headerId)
        {
            return await _headerRepo.GetHeaderPossibleValuesNeutral(headerId);
        }

        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValuesPositive(int headerId)
        {
            return await _headerRepo.GetHeaderPossibleValuesPositive(headerId);
        }
        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValuesToAttack(int headerId)
        {
            return await _headerRepo.GetHeaderPossibleValuesToAttack(headerId);
        }

        public async Task<HttpConversation> GetHttpConversation(int httpConversationId)
        {
            return await this._requestRepository.GetHttpConversation(httpConversationId);
        }


        public async Task<ResponseDto> MakeRequest(StringRequestDto stringRequestDto, int userId)
        {
            RequestDto requestDto = new RequestDto();

            requestDto.WebsiteUrl=stringRequestDto.Url;
            //stringRequestDto.Text= stringRequestDto.Text.Replace(" ","");
            string[] parts=Regex.Split(stringRequestDto.Text,@"[\n]\s*[\n]");
            // '' stringRequestDto.Text.Split(new string[] { Environment.NewLine + Environment.NewLine },
            //                    StringSplitOptions.RemoveEmptyEntries);;
            parts[0]=Regex.Replace(parts[0], @"^\s+", "");
            parts[0]=Regex.Replace(parts[0], @"\s+$", "");
            string[] requests=Regex.Split(parts[0],@"\s+");
                    requestDto.Method=requests[0];
                    requestDto.Url=requests[1];
                    requestDto.Version=requests[2];
                parts[1]=parts[1].Replace(" ","");
                parts[1]=Regex.Replace(parts[1],@"[\n]+$", "");
            var list=parts[1].Split("\n");
            
            foreach(var line in list){
                HeaderDto headerDto= new HeaderDto();
                string[] nameAndValues=line.Split(":");

                headerDto.Name=nameAndValues[0];


                var valuesList=nameAndValues[1].Split(";");
                foreach(string value in valuesList){
                    headerDto.Values.Add(value);
                }


                requestDto.Headers.Add(headerDto);
            }
            if(parts.Length>2)
                requestDto.Body=parts[3];
   



            return await this.MakeRequest(requestDto, userId);
        }

        public async Task<ResponseDto> MakeRequest(RequestDto requestDto, int userId)
        {
            HttpRequestMessage request = new HttpRequestMessage();


            request.Method = toHttpMethod(requestDto.Method);

            if (requestDto.WebsiteUrl != null)
            {
                if (requestDto.Url == null) requestDto.Url = "";
                if(!requestDto.WebsiteUrl.Contains("://"))
                    request.RequestUri = new System.Uri(requestDto.Protocol + "://" + requestDto.WebsiteUrl + requestDto.Url);
                else
                    request.RequestUri = new System.Uri(requestDto.WebsiteUrl + requestDto.Url);
           
            }
            if (requestDto.Headers != null)
            {
                foreach (HeaderDto header in requestDto.Headers)
                {
                    //if(header.Name==null)header.Name="";
                    // if(header.Values==null)header.Values= new List<string>();
                    if (header.Name != null && header.Values != null)
                        request.Headers.Add(header?.Name, header.Values);
                }
            }

            if (requestDto.Body != null)
            {
                //request.Content=  new StringContent(requestDto.Body,Encoding.UTF8, "application/x-www-form-urlencoded");
            }
            //request.Content= new StringContent(requestDto.Body,Encoding.UTF8, "application/x-www-form-urlencoded");




            HttpResponseMessage responce;
            try
            {
                 responce = await _http.SendAsync(request);
            }
            catch (Exception ex)
            {
                ResponseDto response = new ResponseDto();

                response.Headers.Add(new HeaderDto() { Name = "Query failed" });

                return response;
            }

            ResponseDto responseDto = new ResponseDto();
            responseDto.StatusCode = responce.StatusCode.ToString();
            responseDto.Body = responce.Content.ToString();
            responce.Version = responce.Version;
            responseDto.Headers = new List<HeaderDto>();
            foreach (var header in responce?.Headers)
            {
                HeaderDto headerDto = new HeaderDto();
                headerDto.Name = header.Key;
                headerDto.Values = this.SplitHeaderValue(header.Value.First());

                responseDto.Headers.Add(headerDto);
            }
            responseDto.Body = responce.Content.ReadAsStringAsync().Result;
            // responseDto.Content=responce.Content.ToString();
            HttpConversation httpConversation = new HttpConversation();
            //httpConversation.Request = this._mapper.Map<Request>(requestDto);
            // httpConversation.Response = this._mapper.Map<Response>(responseDto);
            httpConversation.WebsiteId = this._webSiteRepo.GetOrAddWebsite(requestDto.WebsiteUrl, userId).Result.Id;

            responseDto.HttpVersion = "HTTP/" + responce.Version;

            Request req = this._mapper.Map<Request>(requestDto);
            if (req.ConctereHeaders == null) req.ConctereHeaders = new List<ConcreteHeader>();
            foreach (var header in requestDto.Headers)
            {
                ConcreteHeader newConcreteHeader = new ConcreteHeader(header.Name);
                foreach (var value in header.Values)
                {
                    newConcreteHeader.ConcreteHeaderValues.Add(new ConcreteHeaderValue(value));
                }
                req.ConctereHeaders.Add(newConcreteHeader);
            }
            httpConversation.RequestId = this._requestRepository.AddRequest(req).Result.Id;
            Response res = this._mapper.Map<Response>(responseDto);
            res.ConctereHeaders = new List<ConcreteHeader>();
            foreach (HeaderDto header in responseDto.Headers)
            {
                ConcreteHeader concreteHeader = new ConcreteHeader(header.Name);

                foreach (var value in header.Values)
                {

                    ConcreteHeaderValue concreteValue = new ConcreteHeaderValue(value);


                    concreteHeader.ConcreteHeaderValues.Add(concreteValue);
                }
                res.ConctereHeaders.Add(concreteHeader);
            }



            httpConversation.ResponseId = this._requestRepository.AddResponse(res).Result.Id;

            httpConversation.UserId = userId;

            httpConversation.Date = DateTime.Now;

            await this._requestRepository.AddHttpConversation(httpConversation);
            return responseDto;
        }

        private string[] SplitHeaderValue(string headerConcatanatedValue)
        {
            String[] spearator = { ";" };
            return headerConcatanatedValue.Split(spearator, 20, StringSplitOptions.RemoveEmptyEntries);
        }



        private HttpMethod toHttpMethod(string name)
        {
            switch (name)
            {
                case "Post":
                    return HttpMethod.Post;
                case "Get":
                    return HttpMethod.Get;
                case "GET":
                    return HttpMethod.Get;
                case "Delete":
                    return HttpMethod.Delete;
                case "Trace":
                    return HttpMethod.Trace;
                case "Put":
                    return HttpMethod.Put;
                case "Patch":
                    return HttpMethod.Patch;
                case "Options":
                    return HttpMethod.Options;
                case "Head":
                    return HttpMethod.Head;
            }
            throw new NotFoundException("Metoda " + name + " najprawdopodobniej nie jest metodą Http i nie można jej zmapować na typ HttpMethod");
        }

    }
}