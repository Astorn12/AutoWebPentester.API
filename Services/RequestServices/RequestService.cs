using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using AutoWebPentester.API.Data.HeaderRepositories;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Model;
using Microsoft.AspNetCore.Mvc;

namespace AutoWebPentester.API.Services.RequestServices
{
    public class RequestService : IRequestService
    {
        private HttpClient _http;
        private  IHeaderRepository _headerRepo;
        public RequestService( IHeaderRepository headerRepo)
        {
            this._headerRepo = headerRepo;
            this._http = new HttpClient();
        }

        public async Task<IEnumerable<Header>> GetAllHeaders()
        {
            return await _headerRepo.GetAll();
        }

        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderAllPossibleValues(int headerId)
        {
         return await _headerRepo.GetHeaderAllPossibleValues(headerId);
        }

        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValuesNeutral(int headerId)
        {
        return await _headerRepo.GetHeaderPossibleValuesNeutral(headerId);
        }

        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValuesPositive(int headerId){
           return await _headerRepo.GetHeaderPossibleValuesPositive(headerId);
       }
       public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValuesToAttack(int headerId){
           return await _headerRepo.GetHeaderPossibleValuesToAttack(headerId);
       }

        public async Task<ResponseDto> MakeRequest(RequestDto requestDto)
        {
            HttpRequestMessage request = new HttpRequestMessage();
            

            request.Method=toHttpMethod(requestDto.Method);
            request.RequestUri=new System.Uri(requestDto.Url);


            // foreach(HeaderDto header in requestDto.Headers){
            //     request.Headers.Add(header.HeaderName,header.Values);
            // }
           
         
            //request.Content= new StringContent(requestDto.Body,Encoding.UTF8, "application/x-www-form-urlencoded");


            
           

            HttpResponseMessage responce=   await _http.SendAsync(request);
           
            ResponseDto responseDto= new ResponseDto();
            responseDto.StatusCode=responce.StatusCode.ToString();
            responseDto.Body=responce.Content.ToString();
            responce.Version=responce.Version;
            foreach( var header in responce.Headers ){
                HeaderDto headerDto= new HeaderDto();
                headerDto.HeaderName=header.Key;
                headerDto.Values=header.Value;

                responseDto.Headers.Add(headerDto);
            }
            responseDto.Body=responce.Content.ReadAsStringAsync().Result;
           // responseDto.Content=responce.Content.ToString();
            return responseDto;
        }

        private HttpMethod toHttpMethod(string name){
            switch(name){
                case "Post":
                    return HttpMethod.Post;
                case "Get":
                    return HttpMethod.Get;
                case "Delete":
                    return HttpMethod.Delete;
                case "Trace":
                    return HttpMethod.Trace;
                case "Put":
                    return HttpMethod.Put;
                case  "Patch":
                    return HttpMethod.Patch;
                case  "Options":
                    return HttpMethod.Options;
                case  "Head":
                    return HttpMethod.Head;
            }
            throw new NotFoundException("Metoda "+name+" najprawdopodobniej nie jest metodą Http i nie można jej zmapować na typ HttpMethod");
        } 
        
           }
}