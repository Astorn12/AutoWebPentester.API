using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs.JsonConvertClasses;
using AutoWebPentester.API.Logic.AllWithPentests.Outcomes;
using AutoWebPentester.API.Logic.AllWithPentests.Resources;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Services.RequestServices;
using Newtonsoft.Json;

namespace AutoWebPentester.API.Logic.AllWithPentests.Caretakers
{
    public class SubdomainSearcher : Caretaker
    {
      

        public async Task<Outcome> CarryOnPentest(WebSite website,IResourceRepository repo,Input input,int userId)
        {

            StandardListOutcome standardList= new StandardListOutcome("Znalezione poddomeny");

            Outcome outcome= new Outcome();
            outcome.DateTime=DateTime.Now;
            HttpRequestService service= new HttpRequestService();

            RequestDto requestDto= new RequestDto();
            requestDto.Method="Head";
            requestDto.Protocol="http";
          //  requestDto.WebsiteUrl=website.Url;
            JStringArray array=  input.Parts[0] as JStringArray;
            foreach(var subdomain in array.Content)
            {
            try{
                string s=subdomain.Value+"."+website.Url;
                s=s.Replace("www.","");
              
                requestDto.WebsiteUrl= s;

            HttpResponseMessage response=service.MakeRequestForPentest(requestDto).Result;
           

             ResourceSketch resourceSketch= await  repo.GetResourceSketch("Subdomain");
                Resource resource= new Resource(resourceSketch, userId);
                resource.WebSiteId=website.Id;
                  IPAddress[] ipaddress=new IPAddress[0];
                try{
                ipaddress = Dns.GetHostAddresses(response.RequestMessage.RequestUri.DnsSafeHost);
                }catch(Exception ex){

                }
                  standardList.Add(s+" ip:"+ipaddress[0]+"");
                resource.Content=new Subdomain(s,ipaddress[0].Address+"");
                await repo.AddResource(resource);
            
            }catch(Exception ex){
               
            }
           
            }

            
               

                outcome.JSONOutcome=JsonConvert.SerializeObject(standardList);
          
            return outcome;
        }

       public IEnumerable<Input> FillInput(WebSite website,IResourceRepository resourceRepo,IEnumerable<Input> inputs,int userId)
        {
         return null;
        }

        // public Task<Outcome> CarryOnPentest(WebSite website, IResourceRepository resourceRepo, Input input)
        // {
        //     throw new NotImplementedException();
        // }
    }
}