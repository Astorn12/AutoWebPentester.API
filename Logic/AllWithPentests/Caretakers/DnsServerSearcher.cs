using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Logic.AllWithPentests.Outcomes;
using AutoWebPentester.API.Logic.AllWithPentests.Resources;
using AutoWebPentester.API.Model;
using DnsClient;
using DnsClient.Protocol;
using HtmlAgilityPack;
using Newtonsoft.Json;
using ScrapySharp.Extensions;
using ScrapySharp.Html.Forms;
using ScrapySharp.Network;

namespace AutoWebPentester.API.Logic.AllWithPentests.Caretakers
{
    public class DnsServerSearcher : Caretaker
    {
        public async Task<Outcome> CarryOnPentest(WebSite website, IResourceRepository repo, Input input,int userId)
        {
            // ScrapingBrowser browser = new ScrapingBrowser();
            // browser.AllowAutoRedirect = true; // Browser has settings you can access in setup
            // browser.AllowMetaRedirect = true;

            // WebPage pageResult = await browser.NavigateToPageAsync(new Uri("https://www.whois.net/default.aspx"));
            // //HtmlNode TitleNode = PageResult.Html.CssSelect(".navbar-brand").First();
            // //string PageTitle = TitleNode.InnerText;

            // PageWebForm form= pageResult.FindFormById("form1");

            // form["domain_search_results"]=website.Url;

            // form.Method=HttpVerb.Post;
            // WebPage resultPage=form.Submit();
            
           // StandardStringOutcome outcomee= new StandardStringOutcome(resultPage.Html.ToString());

            StandardListOutcome standardList= new StandardListOutcome("DNS LookUp");
            ResourceSketch resourceSketch= await repo.GetResourceSketch("Dns server");
            

            var lookup = new LookupClient();
            var result =  await lookup.QueryAsync(website.Url, QueryType.ANY);

            

            var record = result.Answers.ARecords().FirstOrDefault();
            var ip = record?.Address;

            foreach(DnsResourceRecord res in result.Answers.ToArray()){
                standardList.Add(res.ToString());
               Resource resource= new Resource(resourceSketch, userId);
               resource.WebSiteId=website.Id;
                DnsServer ds=new DnsServer(convertToAcceptableString(res));
                if(ds.Value!="")
                {resource.Content=ds;
               await repo.AddResource(resource);}
            
            }

            Outcome outcome= new Outcome();
            outcome.JSONOutcome=JsonConvert.SerializeObject(standardList);

            return outcome;
        }

       
        

        public   string convertToAcceptableString( DnsResourceRecord res)
        {
            ARecord aRecord= res as ARecord;
            if(aRecord!=null) return aRecord.Address.ToString();

            NsRecord ns= res as NsRecord;
            if(ns!=null) return ns.NSDName.Original;

            SoaRecord soa= res as SoaRecord;
            if(soa!= null)return soa.MName.Original;

            MxRecord mx= res as MxRecord;
            if(mx!=null) return mx.Exchange.Original.ToString();

            return "";
        }

         public IEnumerable<Input> FillInput(WebSite website,IResourceRepository resourceRepo,IEnumerable<Input> inputs,int userId)
        {
         return null;
        }
    }
}