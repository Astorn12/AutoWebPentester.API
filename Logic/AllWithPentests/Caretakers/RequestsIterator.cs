using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs.JsonConvertClasses;
using AutoWebPentester.API.Logic.AllWithPentests.Outcomes;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Services.RequestServices;
using Newtonsoft.Json;

namespace AutoWebPentester.API.Logic.AllWithPentests.Caretakers
{
    public class RequestsIterator : Caretaker
    {
        public async Task<Outcome> CarryOnPentest(WebSite website, IResourceRepository resourceRepo, Input input,int userId)
        {
            StandardListOutcome standardList= new StandardListOutcome("Wyniki przeszukiwania adres√≥w url");
            List<Match> list= new List<Match>();
            Outcome outcome= new Outcome();
            outcome.DateTime=DateTime.Now;
            HttpRequestService service= new HttpRequestService();

            RequestDto requestDto= new RequestDto();
            requestDto.Method="Get";
            requestDto.Protocol="http";
            requestDto.WebsiteUrl=website.Url;

            
 
            JString extendUrl= input.Parts[0] as JString;
            JString numbersSet= input.Parts[1] as JString;

            requestDto.Url=extendUrl.Value;
        


            List<String> urls= generateList(input.Parts[1]);


            string orignalUrl=requestDto.Url;
            foreach(var url in urls)
            {
            try{
               
            requestDto.Url=orignalUrl+url;
            HttpResponseMessage response=await service.MakeRequestForPentest(requestDto);
            string body=await response.Content.ReadAsStringAsync();
            list.Add(new Match(url, body.Length));
           
            
                    
            
            }catch(Exception ex){
               
            }
           
            }

            Match match= new Match();
            
            match.MatchList(list);


            foreach(var mat in list){
                StandardStringOutcome d=new StandardStringOutcome(mat.Url.PadRight(7)+"lenght: "+mat.Length);
                d.Matched=mat.Matched;
                standardList.List.Add(d);
            }
             
            outcome.JSONOutcome=JsonConvert.SerializeObject(standardList);
          
            return outcome;
        }

       public IEnumerable<Input> FillInput(WebSite website,IResourceRepository resourceRepo,IEnumerable<Input> inputs,int userId)
        {
         return null;
        }

        private List<string> generateList(JClass jClass)
        {
            JString jString= jClass as JString;
            if(jString!=null)return generateListForInts(jString.Value);
            JStringArray array= jClass as JStringArray;
            return generateListForStrings(array);
        }

        private List<string> generateListForInts(string s){

            

            List<string> list=new List<string>();
            string[] matches= s.Split(",");
            foreach(var match in matches){
                Range range=new Range(match);
            list.AddRange(range.GetRange()); 
            }
            return list;
        }

        private List<string> generateListForStrings(JStringArray stringArray){
             List<string> list=new List<string>();

                foreach(var x in stringArray.Content){
                    list.Add(x.Value);
                }

            return list;
        }

        private class Match{
            public Match()
            {
            }

            public Match(string url, int length)
            {
                Url = url;
                Length = length;

            }

            public string Url { get; set; }
            public int Length { get; set; }
            public bool Matched { get; set; }

            public int GetModa( List<Moda> modas){
                    int max=0;
                    int value=0;
                    foreach(var moda in modas){
                        if(moda.Time>max)
                        {max=moda.Time;
                        value=moda.Value;
                        }
                    }
                    return value;
            }
            public  void MatchList(List<Match> list){
                List<Moda> modas= new List<Moda>();
                foreach(Match match in list){
                    this.AddOrCheck(modas, match);
                }

                int i=GetModa(modas);

                foreach(Match match1 in list){
                    if(match1.Length!=i)match1.Matched=true;
                }

            }

            private void AddOrCheck(List<Moda> modas,Match match){
                bool flag=false;
                foreach(Moda moda in modas){
                    if(moda.Value==match.Length) {
                        moda.Time++;
                        flag=true;
                        break;
                        
                    }
                }
                if(flag==false)
                        modas.Add(new Moda(match.Length));
            }

            public class Moda{
               

                public Moda(int length)
                {
                   this.Value=length;
                }

                public int Value { get; set; }
                public int Time { get; set; }
            }
        }


        private class Range{
            public int Begin { get; set; }
            public int End { get; set; }
       

            public Range(string range)
            {
                if(range.Contains("-")){
                string[] s=range.Split("-");
                this.Begin=Int32.Parse(s[0]);
                this.End=Int32.Parse(s[1]);
                }else{
                    this.Begin=Int32.Parse(range);
                }

                
            }

            internal IEnumerable<string> GetRange()
            {
                List<string> strings=new List<string>();
                for(int i=Begin;i<this.End;i++){
                    strings.Add(i+"");
                }
                return strings;
            }
        }
    }
}