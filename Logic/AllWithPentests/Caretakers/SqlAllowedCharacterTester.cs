using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs.JsonConvertClasses;
using AutoWebPentester.API.Logic.AllWithPentests.Outcomes;
using AutoWebPentester.API.Logic.AllWithPentests.Resources;
using AutoWebPentester.API.Model;
using HtmlAgilityPack;
using Newtonsoft.Json;
using ScrapySharp.Extensions;
using ScrapySharp.Html.Forms;
using ScrapySharp.Network;

namespace AutoWebPentester.API.Logic.AllWithPentests.Caretakers
{
    public class SqlAllowedCharacterTester : Caretaker
    {
        public async Task<Outcome> CarryOnPentest(WebSite website, IResourceRepository resourceRepo, Input input,int userId)
        {
             StandardListOutcome listOutcome= new StandardListOutcome("Sql incection characters checking");
           
           
            JChoosen jChoosen=input.Parts[0] as JChoosen; // number of Form
           

            int formNumber=this.getOrderOfForm(jChoosen,jChoosen.ChoosenValue.Label);
            string inputName=jChoosen.ChoosenValue.ChoosenValue.Label;

            ScrapingBrowser browser = new ScrapingBrowser();
            browser.AllowAutoRedirect = true; // Browser has settings you can access in setup
            browser.AllowMetaRedirect = true;
            string r="http://www."+website.Url;
            WebPage pageResult=null;

            List<char> sqlCharacters= new List<char>();

            try{
            pageResult = await browser.NavigateToPageAsync(new Uri(r));
            }catch(Exception e){
                r="http://"+website.Url;
                pageResult = await browser.NavigateToPageAsync(new Uri(r));
            }
            
            var formList= pageResult.Html.CssSelect("form");

            
             
             List<HtmlNode> formsNodes= new List<HtmlNode>();

             foreach(var f in formList){
                formsNodes.Add(f);
             }
           
           PageWebForm form= new PageWebForm(formsNodes[formNumber], browser);
              
           
        // list.List.Add(new StandardStringOutcome("Login".PadRight(20)+"Response time","columned"));


            foreach(var f in form.FormFields){
                f.Value="fdsafsfewvr45345rtver2342#@$@#$SADASDA";
            }
            
           
           foreach(char character in sqlCharacters){
                
            form[inputName]=prepareSqlInjection(character);
            //form["pass"]=;
            form.Method=HttpVerb.Post;
            try{

            
            WebPage resultPage=form.Submit();

            string tmp=character+"";
            StandardStringOutcome standardStringOutcome=new StandardStringOutcome(tmp.PadRight(7) + " "+resultPage.Content.Count());
            listOutcome.List.Add(standardStringOutcome);
           
            
            }catch(Exception ex){
               listOutcome.List.Add(new StandardStringOutcome("Attack without answer"));
            }


           }
          

            Outcome outcome= new Outcome();
            outcome.JSONOutcome=JsonConvert.SerializeObject(listOutcome);
            return outcome;
        }

        private string prepareSqlInjection(char character){
            return character+"";
        }

        public IEnumerable<Input> FillInput(WebSite website,IResourceRepository resourceRepo,IEnumerable<Input> inputs,int userId)
        {
            
            List<Resource> forms= resourceRepo.GetResourcesByName(website.Id,"Form").Result;
            
            JChoosen main= inputs.First().Parts[0] as JChoosen;


            foreach(Resource  r in forms){
                Form form = r.Content as Form;
                
                JChoosen formChoose= new JChoosen(form.Value);

              
                foreach(var input in form.HtmlInputs){
                    formChoose.Options.Add(new JChoosen(input.Name));
                }    
                
                main.Options.Add(formChoose);  
             }
           
        return inputs;
        }
         private int getOrderOfForm(JChoosen jChoosen, string label){

            int i=0;
            foreach(var form in jChoosen.Options){
                if(form.Label.Equals(label)) return i;
                i++;
            }
            return 0;
        }
       
    }
}