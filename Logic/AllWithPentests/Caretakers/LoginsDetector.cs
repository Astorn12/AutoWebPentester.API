using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs.JsonConvertClasses;
using AutoWebPentester.API.Logic.AllWithPentests.Outcomes;
using AutoWebPentester.API.Logic.AllWithPentests.Resources;
using AutoWebPentester.API.Model;
using HtmlAgilityPack;
using Newtonsoft.Json;
using ScrapySharp.Extensions;
using ScrapySharp.Html.Forms;
using ScrapySharp.Network;

namespace AutoWebPentester.API.Logic.AllWithPentests.Caretakers
{
    public class LoginsDetector : Caretaker
    {
        public async Task<Outcome> CarryOnPentest(WebSite website, IResourceRepository resourceRepo, Input input,int userId)
        {
            StandardListOutcome list= new StandardListOutcome("Time respond of logins");
           
            JString url= input.Parts[0] as JString; // Url
            JChoosen jChoosen=input.Parts[1] as JChoosen; // number of Form
            JStringArray jStringArray= input.Parts[2] as JStringArray;

            int formNumber=this.getOrderOfForm(jChoosen,jChoosen.ChoosenValue.Label);
            string inputName=jChoosen.ChoosenValue.ChoosenValue.Label;

            ScrapingBrowser browser = new ScrapingBrowser();
            browser.AllowAutoRedirect = true; // Browser has settings you can access in setup
            browser.AllowMetaRedirect = true;
            string r="http://www."+website.Url+url.Value;
            WebPage pageResult = await browser.NavigateToPageAsync(new Uri(r));
            Stopwatch stopWatch= new Stopwatch();
            
            var formList= pageResult.Html.CssSelect("form");

            
             
             List<HtmlNode> formsNodes= new List<HtmlNode>();

             foreach(var f in formList){
                formsNodes.Add(f);
             }
           
            PageWebForm form= new PageWebForm(formsNodes[formNumber], browser);
              
           
        //list.List.Add(new StandardStringOutcome("Login".PadRight(20)+"Response time","columned"));


            foreach(var f in form.FormFields){
                f.Value="fdsafsfewvr45345rtver2342#@$@#$SADASDA";
            }
            
            foreach(JString login in jStringArray.Content){
           

            form[inputName]=login.Value;
            //form["pass"]=;
            form.Method=HttpVerb.Post;
            stopWatch.Start();
            WebPage resultPage=form.Submit();
            stopWatch.Stop();
            

            list.List.Add(new StandardStringOutcome (login.Value.PadRight(30)+"  "+stopWatch.Elapsed));
            stopWatch= new Stopwatch();
            }
            
          

            Outcome outcome= new Outcome();
            outcome.JSONOutcome=JsonConvert.SerializeObject(list);

            return outcome;
        }

       public IEnumerable<Input> FillInput(WebSite website,IResourceRepository resourceRepo,IEnumerable<Input> inputs,int userId)
        {
         List<Resource> forms= resourceRepo.GetResourcesByName(website.Id,"Form").Result;
            
            JChoosen main= inputs.First().Parts[1] as JChoosen;


            foreach(Resource  r in forms){
                Form form = r.Content as Form;
                
                JChoosen formChoose= new JChoosen(form.Value);

              
                foreach(var input in form.HtmlInputs){
                    formChoose.Options.Add(new JChoosen(input.Name));
                }    
                
                main.Options.Add(formChoose);  
             }
           
        return inputs;
        }



        private int getOrderOfForm(JChoosen jChoosen, string label){

            int i=0;
            foreach(var form in jChoosen.Options){
                if(form.Label.Equals(label)) return i;
                i++;
            }
            return 0;
        }


        // private List<string> Collumnaise(List<string> strings){
        //     int i= strings.OrderByDescending(strings=>strings.Length).First().Length;

        //     for

        //     StringBuilder stringBuilder
        
        // }
    }
}