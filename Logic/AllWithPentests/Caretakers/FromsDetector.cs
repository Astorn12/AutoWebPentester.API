using System;
using System.Net.Http;
using System.Threading.Tasks;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs.JsonConvertClasses;
using AutoWebPentester.API.Logic.AllWithPentests.Outcomes;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Services.RequestServices;
using ScrapySharp.Html.Forms;
using ScrapySharp.Network;
using HtmlAgilityPack;
using ScrapySharp.Extensions;
using AutoWebPentester.API.Logic.AllWithPentests.Resources;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace AutoWebPentester.API.Logic.AllWithPentests.Caretakers
{
    public class FromsDetector : Caretaker
    {
        public async Task<Outcome> CarryOnPentest(WebSite website, IResourceRepository repo, Input input,int userId)
        {
            JString extendUrl= input.Parts[0] as JString;

            //StandardListOutcome listOutcome1= new StandardListOutcome("Forms on website");
            List<Form> forms= new List<Form>();
            List<Resource> formResources= new List<Resource>();
            HttpRequestService service= new HttpRequestService();

            RequestDto requestDto= new RequestDto();
            requestDto.Method="Head";
            requestDto.Protocol="http";
            requestDto.WebsiteUrl=website.Url;
            requestDto.Url=extendUrl.Value;
          
            HttpResponseMessage response=await service.MakeRequestForPentest(requestDto);
            ResourceSketch resourceSketch= await repo.GetResourceSketch("Form");

            ScrapingBrowser browser = new ScrapingBrowser();
            browser.AllowAutoRedirect = true; // Browser has settings you can access in setup
            browser.AllowMetaRedirect = true;
            string r=requestDto.Protocol+"://"+requestDto.WebsiteUrl+requestDto.Url;
            WebPage pageResult = await browser.NavigateToPageAsync(new Uri(r));
           
            var formList= pageResult.Html.CssSelect("form");

             int orderer=1;

           foreach(var formNode  in formList){
               string cssClass= extractAnyAttribute("class", formNode.Attributes);
               PageWebForm pageWebForm= new PageWebForm(formNode, browser);
               //PageWebForm form= pageResult.FindForm(cssClass);
              Form innerForm = new Form();
                    innerForm.Value= "Form "+orderer;
                    innerForm.Order=orderer;
                    orderer++;
                    innerForm.SubsiteUrl=requestDto.Url;
                   
                    int inputOrderer=1;
               foreach(var formField in pageWebForm.FormFields){
                    HtmlInput htmlInput= new HtmlInput();
                    htmlInput.Order=inputOrderer;
                    inputOrderer++;
                    htmlInput.Name=SettleInputName(formField);

                    innerForm.HtmlInputs.Add(htmlInput);
                    
               }

                Resource resource = new Resource(resourceSketch, userId);
                resource.Content=innerForm;
                resource.WebSiteId= website.Id;
                formResources.Add(resource);
               forms.Add(innerForm);
           }


          
            
            //form[jString2.Value]=login.Value;
           
            repo.AddResourcesAsync(formResources);

            Outcome outcome= new Outcome();
            outcome.DateTime=DateTime.Now;
            outcome.JSONOutcome= JsonConvert.SerializeObject(forms);
            return outcome;
        }

        private string  SettleFormName(HtmlNode htmlNode){
            

            return "form";
        }

        private string SettleInputName(FormField formField){

        
           return formField.Name;     
        }   
        private string extractAnyAttribute(string name,HtmlAttributeCollection attributes){

            foreach(var attribute in attributes){
                if(attribute.Name.Equals(name)) return attribute.Value;
            }
            return "";
        }

       public IEnumerable<Input> FillInput(WebSite website,IResourceRepository resourceRepo,IEnumerable<Input> inputs,int userId)
        {
         return null;
        }
    }
}