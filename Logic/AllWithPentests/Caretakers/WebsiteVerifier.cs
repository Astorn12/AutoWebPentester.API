using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Net.Http;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Logic.AllWithPentests.Outcomes;
using AutoWebPentester.API.Logic.AllWithPentests.Resources;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Services.RequestServices;
using Newtonsoft.Json;

namespace AutoWebPentester.API.Logic.AllWithPentests.Caretakers
{
    public class WebsiteVerifier  : Caretaker
    {
       
        public int MyProperty { get; set; }

        public  async Task<Outcome> CarryOnPentest(WebSite website, IResourceRepository repo,Input input,int userId)
        {
            Outcome outcome= new Outcome();
            outcome.DateTime=DateTime.Now;
            HttpRequestService service= new HttpRequestService();
            
            RequestDto requestDto= new RequestDto();
            requestDto.Method="Head";
            requestDto.Protocol="http";
            requestDto.WebsiteUrl=website.Url;
             bool isAvaillable;
            try{
            HttpResponseMessage response=service.MakeRequestForPentest(requestDto).Result;
           isAvaillable=response.IsSuccessStatusCode;
            }catch(Exception ex){
                isAvaillable=false;
            }
           

            if(isAvaillable){
                ResourceSketch resourceSketch= await  repo.GetResourceSketch("Verified");
                Resource resource= new Resource(resourceSketch, userId);
                
                resource.WebSiteId=website.Id;
                resource.Content= new EmptyContent();
                await repo.AddResource(resource);

                outcome.JSONOutcome=JsonConvert.SerializeObject(new StandardStringOutcome("Website is verified"));
            }else{
                outcome.JSONOutcome=JsonConvert.SerializeObject(new StandardStringOutcome("Website is not verified"));
            }
            return outcome;
        }

         public IEnumerable<Input> FillInput(WebSite website,IResourceRepository resourceRepo,IEnumerable<Input> inputs,int userId)
        {
         return null;
        }
    }
}