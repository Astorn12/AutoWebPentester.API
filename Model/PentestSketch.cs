using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using AutoWebPentester.API.Data;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.Logic.AllWithPentests.Caretakers;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using Newtonsoft.Json;

namespace AutoWebPentester.API.Model
{
    public class PentestSketch
    {
        public PentestSketch(int id, string name) 
        {
            this.Id = id;
                this.Name = name;
               
        }
       
        public int Id { get; set; }
        public string Name { get; set; }



        public PentestSketch(string name, IEnumerable<Input> inputs,Caretaker caretaker)
        {
            this.Name = name;
            this.Inputs = inputs;
            this.Caretaker=caretaker;
        }

        

        private PentestSketch()
        {

        }

       

        internal string _Inputs { get; set; }



        public string GetCareTakerAsString()
        {
            return _Caretaker;
        }
        internal string _Caretaker { get; set; }

public string GetInputsAsString()
        {
            return _Inputs;
        }

        [NotMapped]
        public IEnumerable<Input> Inputs
        {
            get
            {

                return _Inputs == null ? null : JsonConvert.DeserializeObject<List<Input>>(_Inputs,new JsonSerializerSettings{TypeNameHandling=TypeNameHandling.Auto});
            }
            set
            {
                
                _Inputs = JsonConvert.SerializeObject(value,new JsonSerializerSettings{TypeNameHandling=TypeNameHandling.Auto});
            }
        }
        [NotMapped]
        public Caretaker Caretaker
        {
            get
            {

                return _Caretaker == null ? null : JsonConvert.DeserializeObject<Caretaker>(_Caretaker,new JsonSerializerSettings{TypeNameHandling=TypeNameHandling.All});
            }
            set
            {
                
                _Caretaker = JsonConvert.SerializeObject(value,new JsonSerializerSettings{TypeNameHandling=TypeNameHandling.All});
            }
        }



        





        public IEnumerable<PentestTag> PentestTags { get; set; }
        public IEnumerable<PentestRequiredResource> PentestRequiredResources { get; set; }
        public IEnumerable<PentestProvidedResource> PentestProvidedResources { get; set; }

        internal IEnumerable<Input> FillInput(WebSite  webSite, IResourceRepository repo,int userId)
        {
            return this.Caretaker.FillInput(webSite,repo, this.Inputs, userId);
        }
    }
}