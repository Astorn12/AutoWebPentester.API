using System.Collections.Generic;
using System.Threading.Tasks;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Services.ReportServices;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace AutoWebPentester.API.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class RaportController : ControllerBase
    {
        private  IReportService _service;

        public RaportController(IReportService service)
       {
            this._service = service;
       }

       [HttpGet("{websiteId}")]
       public async Task<IActionResult> GetReport(int websiteId){

           List<ResourceSketch> resourceSketches= await this._service.GetAllResourceSketches();

           List<UniversalResourceDto> universalResourceDtos= new List<UniversalResourceDto>();
           foreach(var resourceSketch in resourceSketches){
              

                LinkedList<Resource> resources= new LinkedList<Resource>(await this._service.GetResources(websiteId,resourceSketch));
                if(resourceSketch.Groupable){
                    UniversalResourceDto newUniversalResource=new UniversalResourceDto();

                        newUniversalResource.Id=resourceSketch.Id;
                        newUniversalResource.GroupName=resourceSketch.Name + " group";
                      
                        newUniversalResource.Type=resourceSketch.Type;
                        

                      foreach(Resource resource in resources){
                        ResourceDto resourceDto=new ResourceDto();
                        resourceDto.Name=resource.Name;
                        resourceDto.Id=resource.Id;
                        resourceDto.JSON=resource._Content;
                        newUniversalResource.Resources.Add(resourceDto);
                      }
                      universalResourceDtos.Add(newUniversalResource);
                }else{
                    if(resources.Count==0){
                        UniversalResourceDto newUniversalResource=new UniversalResourceDto();
                         newUniversalResource.Id=resourceSketch.Id;
                         newUniversalResource.Name=resourceSketch.Name;
                         newUniversalResource.Type=resourceSketch.Type;
                         universalResourceDtos.Add(newUniversalResource);
                    }else{
                    foreach(Resource resource in resources){
                         UniversalResourceDto newUniversalResource=new UniversalResourceDto();
                         newUniversalResource.Id=resourceSketch.Id;
                         newUniversalResource.Name=resource.Name;
                         newUniversalResource.Type=resource.Type;
                         
                         ResourceDto resourceDto=new ResourceDto();
                         resourceDto.Name=resource.Name;
                         resourceDto.Id=resourceDto.Id;
                         resourceDto.JSON=resource._Content;
                         newUniversalResource.Resources.Add(resourceDto);
                         universalResourceDtos.Add(newUniversalResource);
                    }
                    }
                    
                }
           }
           return Ok(universalResourceDtos);
       }
    }
}