using System.Collections.Generic;
using System.Threading.Tasks;
using AutoMapper;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Services.PentestServices;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace AutoWebPentester.API.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class PentestController : ControllerBase
    {
        private IPentestService _service;
        private IMapper _mapper;

        public PentestController(IPentestService _service, IMapper mapper)
        {
            this._mapper = mapper;
            this._service = _service;

        }

        [HttpGet("/notcarriedon")]
        public async Task<IActionResult> GetNotCarriedOn()
        {
            return StatusCode(200);
            //return this._service.
        }

        [HttpGet]
        public async Task<IActionResult> AttackHistory()
        {
            return StatusCode(200);
        }

        [HttpGet("tagkinds")]
        public async Task<IActionResult> GetTagKinds()
        {
            return Ok(await _service.GetTagKinds());
        }

        [HttpGet("tags/{tagKindId}")]
        public async Task<IActionResult> GetTags(int tagKindId)
        {
            return Ok(await _service.GetTags(tagKindId));
        }

        [HttpGet("pentests/{tagId}")]
        public async Task<IActionResult> GetPentestsWithTag(int tagId)
        {
            var pentests = await _service.GetPentestsByTag(tagId);
            var enumerator=pentests.GetEnumerator();
            enumerator.MoveNext();
            var pen=enumerator.Current;
            var test= _mapper.Map<PentestSketchDto>(pen);
            return Ok(_mapper.Map<List<PentestSketchDto>>(pentests));

        }

        [HttpGet("pentestSketchDetails/{pentestSketchId}")]
        public async Task<IActionResult> GetPentestsSketchWithDetails(int pentestSketchId){
            var pen = await _service.GetPentestSketch(pentestSketchId);
            return Ok( _mapper.Map<PentestSketchDetailsDto>(pen));
        }

        [HttpPost("carryOnPentest")]
        public async Task<IActionResult> CarryOnPentest(PentestSketchDetailsDto filledPentest){
            return  Ok( await this._service.CarryOnPentest(filledPentest));
        }
    }
}