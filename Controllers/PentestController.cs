using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Threading.Tasks;
using AutoMapper;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Models;
using AutoWebPentester.API.Services.PentestServices;
using AutoWebPentester.API.Services.UserServices;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Oskar.Desktop.Mgr.AutoWebPentester.AutoWebPentester_SPA.src.app._model;

namespace AutoWebPentester.API.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class PentestController : ControllerBase
    {
        private IPentestService _service;
        private IMapper _mapper;
        private  IUserService _userService;

        public PentestController(IPentestService _service, IMapper mapper, IUserService userService)
        {
            this._userService = userService;
            this._mapper = mapper;
            this._service = _service;
        }

        [HttpGet("/notcarriedon")]
        public async Task<IActionResult> GetNotCarriedOn()
        {
            return StatusCode(200);
        }

        [HttpGet]
        public async Task<IActionResult> AttackHistory()
        {
            return StatusCode(200);
        }

        [HttpGet("tagkinds")]
        public async Task<IActionResult> GetTagKinds()
        {
            var tmp = await _service.GetTagKinds();
            var ret = _mapper.Map<IEnumerable<TagKindDto>>(tmp);

            foreach (TagKindDto tagKindDto in ret)
            {
                foreach (TagDto tagDto in tagKindDto.Tags)
                {
                    tagDto.Amount = await this._service.GetNumberOfPentestsWithTag(tagDto.Id);
                }

            }
            return Ok(ret);
        }

        [HttpGet("tags/{tagKindId}")]
        public async Task<IActionResult> GetTags(int tagKindId)
        {
            return Ok(await _service.GetTags(tagKindId));
        }

        [HttpGet("pentests/{tagId}")]
        public async Task<IActionResult> GetPentestsWithTag(int tagId)
        {
            var pentests = await _service.GetPentestsByTag(tagId);
            var enumerator = pentests.GetEnumerator();
            enumerator.MoveNext();
            var pen = enumerator.Current;
            var test = _mapper.Map<PentestSketchDto>(pen);
            return Ok(_mapper.Map<List<PentestSketchDto>>(pentests));
        }

        [HttpGet("pentestSketchDetails/{websiteId}/{pentestSketchId}")]
        public async Task<IActionResult> GetPentestsSketchWithDetails(int websiteId, int pentestSketchId)
        {
            return Ok(await _service.GetPentestSketchDetailsDto(pentestSketchId, websiteId,GetCurrentUserId()));
        }

        [HttpPost("carryOnPentest")]
        public async Task<IActionResult> CarryOnPentest(FilledPentestDto filledPentest)
        {
            PentestOutcomeDto response;
            try
            {
                response = await this._service.CarryOnPentest(filledPentest, this.GetCurrentUserId());
            }
            catch (Exception ex)
            {
                return BadRequest();
            }
            return Ok(response);
        }

        [HttpGet("website/{websiteId}")]
        public async Task<IActionResult> GetWebsite(int websiteId)
        {
            var website = await _service.GetWebsite(websiteId);
            return Ok(_mapper.Map<WebsiteDto>(website));
        }

        [HttpGet("pentestsProvidedResource/{resourceId}")]
        public async Task<IActionResult> GetPentestsProvidedResource(int resourceId)
        {
            IEnumerable<PentestSketch> pentests = await _service.GetPentestsProvidedResource(resourceId);
            return Ok(_mapper.Map<List<PentestToShowList>>(pentests));
        }

        [HttpGet("pentestResources/{pentestId}/{websiteId}")]
        public async Task<IActionResult> GetPentestResources(int pentestId, int websiteId)
        {
            return Ok(await _service.GetPentestResources(pentestId, websiteId));
        }

        [HttpGet("history/{websiteId}")]
        public async Task<IActionResult> GetPentestHistory(int websiteId)
        {

            User user = await this._userService.GetUser(this.GetCurrentUserId());
             List < Pentest > pentests;
            if(user.Role!=null && user.Role.Equals("Premium"))
            {
              pentests = await this._service.GetPentestHistory(websiteId);
            }else{
                 pentests = await this._service.GetPentestHistory(websiteId,GetCurrentUserId());
            }
            return Ok(this._mapper.Map<List<PentestToHistoryListDto>>(pentests));
        }

        [HttpGet("old/{pentestId}")]
        public async Task<IActionResult> GetOldPentest(int pentestId)
        {
            Pentest pentest = await this._service.GetPentest(pentestId);

            OldPentestDto oldPentestDto = new OldPentestDto();
            oldPentestDto.outcome = new PentestOutcomeDto();
            oldPentestDto.outcome.Id = pentest.Id;
            oldPentestDto.outcome.JSONOutcome = pentest.GetOutputAsString();

            oldPentestDto.filledPentest = new PentestSketchDetailsDto();

            oldPentestDto.PentestSketchId = pentest.PentestSketchId;

            PentestSketchDetailsDto sketch = await _service.GetPentestSketchDetailsDto(pentest.PentestSketchId, pentest.WebsiteId,GetCurrentUserId());

            oldPentestDto.filledPentest = sketch;
            sketch.Inputs = "[" + pentest.GetInputsAsString() + "]";
            return Ok(oldPentestDto);
        }




        private int GetCurrentUserId()
        {
            int userId = 0;
            Int32.TryParse(User.FindFirstValue(ClaimTypes.NameIdentifier), out userId);
            return userId;
        }
    }
}