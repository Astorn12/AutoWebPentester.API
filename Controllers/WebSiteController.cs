using System;
using System.Security.Claims;
using System.Threading.Tasks;
using AutoMapper;
using AutoWebPentester.API.Data;
using AutoWebPentester.API.Data.WebSiteRepositories;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Models;
using AutoWebPentester.API.Services.PentestServices;
using AutoWebPentester.API.Services.ReportServices;
using AutoWebPentester.API.Services.UserServices;
using AutoWebPentester.API.Services.WebSiteServices;

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace AutoWebPentester.API.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class WebSiteController : ControllerBase
    {
        private readonly IWebSiteService webSiteService;
        private readonly IMapper mapper;
        private readonly DataContext context;
        private readonly IWebSiteRepository repo;
        private IPentestService _pentestService;
        private readonly IReportService _reportService;
        private readonly IUserService _userService;

        public WebSiteController(IWebSiteService webSiteService, IMapper mapper, DataContext context, IWebSiteRepository repo, IPentestService pentestService, IReportService reportService,IUserService userService)
        {
            this._reportService = reportService;
            this._userService = userService;
            this._pentestService = pentestService;
            this.repo = repo;
            this.context = context;

            this.mapper = mapper;
            this.webSiteService = webSiteService;
        }

        [HttpGet]
        public async Task<IActionResult> GetWebSites()
        {
            return Ok((await this.webSiteService.GetAll(GetCurrentUserId())));
        }

        [HttpGet("recent")]
        public async Task<IActionResult> GetRecentWebSites()
        {
            return Ok(await this.webSiteService.GetRecent(GetCurrentUserId()));
        }



        [HttpPost("add")]
        public async Task<IActionResult> AddAsync(WebSiteToAddDto webSiteToAddDto)
        {
            WebSite newWebSite = this.mapper.Map<WebSite>(webSiteToAddDto);
            await this.webSiteService.Add(newWebSite, GetCurrentUserId());
            return StatusCode(200);
        }

        [HttpGet("getIdOrAdd/{websiteUrl}")]
        public async Task<IActionResult> GetOrAdd(string websiteUrl)
        {
            return Ok(await this.webSiteService.GetOrAdd(websiteUrl, GetCurrentUserId()));
        }


        [HttpGet("{websiteId}")]
        public async Task<IActionResult> GetDetails(int websiteId)
        {
            var tmp = await this.webSiteService.GetDetails(websiteId, GetCurrentUserId());
            return Ok(tmp);
        }

        [HttpGet("statistics/{websiteId}")]
        public async Task<IActionResult> GetStatistics(int websiteId)
        {
            User user= await this._userService.GetUser(GetCurrentUserId());

            

            StatisticsAboutWebsiteDto stats = new StatisticsAboutWebsiteDto();
            stats.WebsiteId = websiteId;

            if(user.Role!=null && user.Role.Equals("Premium")){
            stats.NumberOfPentests = await this._pentestService.GetNumberOfPentests(websiteId);
            stats.NumberOfInformations = await this._reportService.GetNumberOfResources(websiteId);
            }else{
                  stats.NumberOfPentests = await this._pentestService.GetNumberOfPentests(websiteId,user.Id);
            stats.NumberOfInformations = await this._reportService.GetNumberOfResources(websiteId,user.Id);
            }


            return Ok(stats);
        }

        [HttpDelete("{websiteId}")]

        public async Task<IActionResult> DeleteWebsite(int websiteId){
            return Ok(await this.webSiteService.DeleteWebsite(websiteId,this.GetCurrentUserId()));
        }

        [HttpGet("restartDb")]
        public async Task<IActionResult> RestartDb(){

             this.webSiteService.RestartDb();
            return  Ok(200);
        }



        private int GetCurrentUserId()
        {
            int userId = 0;
            Int32.TryParse(User.FindFirstValue(ClaimTypes.NameIdentifier), out userId);
            return userId;
        }


    }
}