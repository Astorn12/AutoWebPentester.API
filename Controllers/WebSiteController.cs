using System;
using System.Security.Claims;
using System.Threading.Tasks;
using AutoMapper;
using AutoWebPentester.API.Data;
using AutoWebPentester.API.Data.WebSiteRepositories;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Services.WebSiteServices;

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace AutoWebPentester.API.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class WebSiteController : ControllerBase
    {
        private readonly IWebSiteService webSiteService;
        private readonly IMapper mapper;
        private readonly DataContext context;
        private readonly IWebSiteRepository repo;

        public WebSiteController(IWebSiteService webSiteService, IMapper mapper, DataContext context, IWebSiteRepository repo)
        {
            this.repo = repo;
            this.context = context;

            this.mapper = mapper;
            this.webSiteService = webSiteService;
        }

        [HttpGet]
        public async Task<IActionResult> GetWebSites()
        {
            return  Ok(this.webSiteService.GetAll(getActualUserId()).Result);
        }

         [HttpGet("recent")]
        public async Task<IActionResult> GetRecentWebSites()
        {
            return  Ok(this.webSiteService.GetRecent(getActualUserId()).Result);
        }



        [HttpPost("add")]
        public async Task<IActionResult> AddAsync(WebSiteToAddDto webSiteToAddDto)
        {
            WebSite newWebSite = this.mapper.Map<WebSite>(webSiteToAddDto);
            await this.webSiteService.Add(newWebSite, getActualUserId());
            return StatusCode(200);
        }



        private int getActualUserId()
        {
            int userId = 0;
            Int32.TryParse(User.FindFirstValue(ClaimTypes.NameIdentifier), out userId);
            return userId;
        }

    }
}