using System;
using System.Collections.Generic;
using System.Security.Claims;
using System.Threading.Tasks;
using AutoMapper;
using AutoWebPentester.API.Data;
using AutoWebPentester.API.Data.HttpRepositories;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Model;
using AutoWebPentester.API.Services.RequestServices;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace AutoWebPentester.API.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class RequestController : ControllerBase
    {
        private IRequestService _service;
        private IHttpRepository _repoHttp;
        private readonly IMapper _mapper;

        public RequestController(IRequestService service, IHttpRepository repoHttp, IMapper mapper)
        {
            this._mapper = mapper;
            _service = service;
            _repoHttp = repoHttp;
        }

        [HttpGet("headers")]
        public async Task<IActionResult> GetAllHeaders()
        {
            return Ok(await _service.GetAllHeaders());
        }

        [HttpGet("httpMethods")]
        public async Task<IActionResult> GetHttpMethods()
        {
            var methods = _repoHttp.GetHttpMethods();
            return Ok(methods);
        }

        [HttpGet("httpVersions")]
        public async Task<IActionResult> GetHttpVersions()
        {
            var version = _repoHttp.GetHttpVersions();
            return Ok(version);
        }

        [HttpPost("request")]
        public async Task<IActionResult> MakeRequest(RequestDto requestDto)
        {

           try{
            
            return Ok(await _service.MakeRequest(requestDto,GetCurrentUserId()));
           }
           catch(Exception ex){
            return BadRequest();
           }
        }

        [HttpPost("request2")]
        public async Task<IActionResult> MakeRequest(StringRequestDto stringRequestDto){
            try{
            return Ok(await _service.MakeRequest(stringRequestDto,GetCurrentUserId()));
            }
            catch(Exception ex){
                return BadRequest();
            }
        }

       

        [HttpGet("websiteHistory/{websiteUrl}")]
        public async Task<IActionResult> GetConversationWithWebsite(string websiteUrl)
        {

            IEnumerable<HttpConversation> httpConversations = await this._service.GetConversationWithWebsite(websiteUrl, GetCurrentUserId());
            return Ok(this._mapper.Map<IEnumerable<HttpConversationDto>>(httpConversations));
        }

        [HttpGet("userHistory")]
        public async Task<IActionResult> GetAllConversations()
        {
             IEnumerable<HttpConversation> httpConversations =await this._service.GetAllConversations(GetCurrentUserId());
           var v=this._mapper.Map<IEnumerable<HttpConversationDto>>(httpConversations);
            return Ok(v);
        }
        [HttpGet("httpConversation/{httpConversationId}")]
        public async Task<IActionResult> GetOldHttpConversation(int httpConversationId){
            HttpConversation httpConversation= await this._service.GetHttpConversation(httpConversationId);
            HttpConversationDto dto=this._mapper.Map<HttpConversationDto>(httpConversation);
            dto.Request.Headers= new List<HeaderDto>();
            foreach(var header in httpConversation.Request.ConctereHeaders){
                HeaderDto headerDto= new HeaderDto();
                headerDto.Name=header.Name;
               

                foreach(var value in header.ConcreteHeaderValues){
                    headerDto.Values.Add(value.Value);
                }
                dto.Request.Headers.Add(headerDto);
            }


            dto.Response.Headers= new List<HeaderDto>();

            foreach(var header in httpConversation.Response.ConctereHeaders){
                HeaderDto headerDto= new HeaderDto();
                headerDto.Name=header.Name;
               
               foreach(var value in header.ConcreteHeaderValues){
                   headerDto.Values.Add(value.Value);
               }
                dto.Response.Headers.Add(headerDto);
            }

            return Ok(dto);
        }

        private int GetCurrentUserId()
        {
            int userId = 0;
            Int32.TryParse(User.FindFirstValue(ClaimTypes.NameIdentifier), out userId);
            return userId;
        }
    }
}