using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Model;
using Microsoft.EntityFrameworkCore;

namespace AutoWebPentester.API.Data.PentestRepository
{
    public class PentestRepository : IPentestRepository
    {
        private DataContext _context;
        public PentestRepository(DataContext context)
        {
            this._context = context;
        }
        public IEnumerable<PentestSketch> GetMostActualPentests(int userId)
        {
            throw new System.NotImplementedException();
        }

        public async Task<IEnumerable<PentestSketch>> GetPentestsByTag(int tagKindId)
        {
          return await _context.PentestSketches.Where(x=>x.PentestTags.Any(y=>y.TagId==tagKindId)).ToListAsync();
        }

        public async Task<PentestSketch> getPentestSketch(int pentestSketchId)
        {
            return await this._context.PentestSketches.FirstOrDefaultAsync(x=>x.Id==pentestSketchId);
        }

        public async Task<IEnumerable<TagKind>> GetTagKinds()
        {
            return await _context.TagKinds.Include(x=>x.Tags).ToListAsync();
        }

        public async Task< IEnumerable<Tag>> GetTags(int tagKindId)
        {
            // List<PentestGroupDto> pentestGroupDtos= new List<PentestGroupDto>();

            // var tags=await _context.Tags.Where(x=>x.Id==tagKindId).ToListAsync();
            // foreach(Tag tag in tags){

            //     var matchedPentest= await  _context.Pentests.Include(x=>x.Tags).Where(x=>x.Tags.Any(y=>y.Id==tag.Id)).ToListAsync();
            //     pentestGroupDtos.Add(new PentestGroupDto(){
            //         Name=tag.Name,
            //         Pentests=matchedPentest;
            //     });
            // }
           return _context.Tags.Where(x=>x.TagKindId==tagKindId);
        }

       
    }
}