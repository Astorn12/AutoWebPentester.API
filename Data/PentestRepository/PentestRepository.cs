using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using AutoWebPentester.API.Data.ResourcesRepository;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Model;
using Microsoft.EntityFrameworkCore;

namespace AutoWebPentester.API.Data.PentestRepository
{
    public class PentestRepository : IPentestRepository
    {
        private DataContext _context;
        private IMapper _mapper;
        public PentestRepository(DataContext context, IMapper mapper)
        {
            this._mapper = mapper;
            this._context = context;
        }

        public async Task<Pentest> AddPentest(Pentest pentest)
        {
            await this._context.Pentests.AddAsync(pentest);
            await this._context.SaveChangesAsync();
            return pentest;
        }

        public IEnumerable<PentestSketch> GetMostActualPentests(int userId)
        {
            throw new System.NotImplementedException();
        }

        public async Task<int> GetNumberOfPentests(int websiteId)
        {
            return await this._context.Pentests.Where(x=>x.WebsiteId==websiteId).CountAsync();
        }

        public async Task<int> GetNumberOfPentests(int websiteId, int id)
        {
            return await this._context.Pentests.Where(x=>x.WebsiteId==websiteId && x.UserId==id).CountAsync();
        }

        public async Task<int> GetNumberOfPentestsWithTag(int id)
        {
            return await _context.PentestSketches.Include(x=>x.PentestTags).Where(x=>x.PentestTags.Any(y=>y.TagId==id)).CountAsync();
        }

        public async Task<Pentest> GetPentest(int pentestId)
        {
            return await this._context.Pentests.FirstOrDefaultAsync(x=>x.Id==pentestId);
        }

        public async Task<List<Pentest>> GetPentestHistory(int websiteId)
        {
            return await _context.Pentests.Include(x=>x.PentestSkech).Where(x=>x.WebsiteId==websiteId).OrderByDescending(x=>x.Date).ToListAsync();
        }

        public async Task<List<Pentest>> GetPentestHistory(int websiteId, int userId)
        {
            return await _context.Pentests.Include(x=>x.PentestSkech).Where(x=>x.WebsiteId==websiteId &&x.UserId==userId).OrderByDescending(x=>x.Date).ToListAsync();

        }

        public async Task<List<RequirementDto>> GetPentestResources(int pentestId,int websiteId)
        {
            PentestSketch pen = await this._context.PentestSketches.Include(x=>x.PentestRequiredResources).ThenInclude(y=>y.ResourceSketch).FirstOrDefaultAsync(x => x.Id == pentestId);
            PentestSketchDetailsDto sketch = _mapper.Map<PentestSketchDetailsDto>(pen);
            sketch.Requirements= new List<RequirementDto>();

            foreach (var resource in pen.PentestRequiredResources)
            {
                RequirementDto requirement = new RequirementDto();
                requirement.Id = resource.ResourceSketchId;
                requirement.Name = resource.ResourceSketch.Name;

                if(_context.Resources.Any(x=>x.ResourceSketchId==resource.ResourceSketchId && x.WebSiteId==websiteId)) 
                    requirement.IsFound=true;
                
                sketch.Requirements.Add(requirement);
            }
            return sketch.Requirements;
        }

        public async Task<IEnumerable<PentestSketch>> GetPentestsByTag(int tagKindId)
        {
            return await _context.PentestSketches.Where(x => x.PentestTags.Any(y => y.TagId == tagKindId)).ToListAsync();
        }

        public async Task<PentestSketch> getPentestSketch(int pentestSketchId)
        {
            return await this._context.PentestSketches.FirstOrDefaultAsync(x => x.Id == pentestSketchId);
        }

        public async Task<PentestSketchDetailsDto> GetPentestSketchDetailsDto(int pentestSketchId, int websiteId,IResourceRepository repo,int userId)
        {
            PentestSketch pen = await this._context.PentestSketches.Include(x=>x.PentestRequiredResources).ThenInclude(y=>y.ResourceSketch).FirstOrDefaultAsync(x => x.Id == pentestSketchId);
            WebSite webSite= await  this._context.WebSites.FirstOrDefaultAsync(x=>x.Id==websiteId);
            IEnumerable<Input> modifiedInputs=pen.FillInput(webSite,repo,userId);
            if(modifiedInputs!=null){
                pen.Inputs=modifiedInputs;
            }

            PentestSketchDetailsDto sketch = _mapper.Map<PentestSketchDetailsDto>(pen);
            sketch.Requirements= new List<RequirementDto>();

            foreach (var resource in pen.PentestRequiredResources)
            {
                RequirementDto requirement = new RequirementDto();
                requirement.Id = resource.ResourceSketchId;
                requirement.Name = resource.ResourceSketch.Name;

                if(_context.Resources.Any(x=>x.ResourceSketchId==resource.ResourceSketchId && x.WebSiteId==websiteId)) 
                    requirement.IsFound=true;
                
                sketch.Requirements.Add(requirement);

            }
            return sketch;
        }

        public async Task<IEnumerable<PentestSketch>> GetPentestsProvidedResource(int resourceId)
        {
            return await _context.PentestSketches.Include(x=>x.PentestProvidedResources).Where(x=>x.PentestProvidedResources.Any(y=>y.ResourceSketchId==resourceId)).ToListAsync();
        }

        public async Task<IEnumerable<TagKind>> GetTagKinds()
        {
            return await _context.TagKinds.Include(x => x.Tags).ToListAsync();
        }

        public async Task<IEnumerable<Tag>> GetTags(int tagKindId)
        {
            // List<PentestGroupDto> pentestGroupDtos= new List<PentestGroupDto>();

            // var tags=await _context.Tags.Where(x=>x.Id==tagKindId).ToListAsync();
            // foreach(Tag tag in tags){

            //     var matchedPentest= await  _context.Pentests.Include(x=>x.Tags).Where(x=>x.Tags.Any(y=>y.Id==tag.Id)).ToListAsync();
            //     pentestGroupDtos.Add(new PentestGroupDto(){
            //         Name=tag.Name,
            //         Pentests=matchedPentest;
            //     });
            // }
            return _context.Tags.Where(x => x.TagKindId == tagKindId);
        }

        public async Task<WebSite> GetWebsite(string url)
        {
            return await _context.WebSites.FirstOrDefaultAsync(x=>x.Url==url);
        }

        public async Task<WebSite> GetWebsite(int websiteId)
        {
          return await _context.WebSites.FirstOrDefaultAsync(x=>x.Id==websiteId);
        }
    }
}