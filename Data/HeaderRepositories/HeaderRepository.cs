using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoWebPentester.API.Model;
using Microsoft.EntityFrameworkCore;
using static AutoWebPentester.API.Model.HeaderPossibleValue;

namespace AutoWebPentester.API.Data.HeaderRepositories
{
    public class HeaderRepository : IHeaderRepository
    {
        private readonly DataContext _context;

        public HeaderRepository(DataContext context)
        {
            _context = context;
        }
        public async Task<IEnumerable<Header>> GetAll()
        {
            return await  this._context.Headers.Include(x=>x.PossibleValues).Where(x=>true).ToListAsync();
        }

        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderAllPossibleValues(int headerId)
        {
           var header=await _context.Headers.Include(x=>x.PossibleValues).FirstOrDefaultAsync(x=>x.Id==headerId);
           return header.PossibleValues.Where(x=>true);
        }

        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValuesNeutral(int headerId)
        {
            return await GetHeaderPossibleValues(headerId, ValuePositivity.NEUTRAL);

        }

        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValuesPositive(int headerId)
        {
            return await GetHeaderPossibleValues(headerId,ValuePositivity.POSITIVE);
            
        }

        public async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValuesToAttack(int headerId)
        {
            return await GetHeaderPossibleValues(headerId, ValuePositivity.AGGRESIVE);
        }

        private async Task<IEnumerable<HeaderPossibleValue>> GetHeaderPossibleValues(int headerId,ValuePositivity valuePositivity){
            var header=await _context.Headers.Include(x=>x.PossibleValues).FirstOrDefaultAsync(x=>x.Id==headerId);
           return header.PossibleValues.Where(x=>x.Positivity==(int)valuePositivity);
        }

        

      
    }
}