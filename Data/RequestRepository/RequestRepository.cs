using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoWebPentester.API.DTOs;
using AutoWebPentester.API.Model;
using Microsoft.EntityFrameworkCore;

namespace AutoWebPentester.API.Data.RequestRepository
{
    public class RequestRepository : IRequestRepository
    {
        private DataContext _context;

        public RequestRepository(DataContext context)
        {
            this._context = context;

        }

        public async Task<HttpConversation> AddHttpConversation(HttpConversation httpConversation)
        {
            await this._context.HttpConversations.AddAsync(httpConversation);
            await this._context.SaveChangesAsync();
            return httpConversation;
        }

        public async Task<Request> AddRequest(Request req)
        {
            await this._context.Requests.AddAsync(req);
            await this._context.SaveChangesAsync();
            return req;
        }

        public async Task<Response> AddResponse(Response res)
        {
            await this._context.Responses.AddAsync(res);
            await this._context.SaveChangesAsync();
            return res;
        }

        public async Task<IEnumerable<HttpConversation>> GetAllConversations(int userId)
        {
            return await this._context.HttpConversations.Include(x=>x.WebSite).Where(x=>x.UserId==userId).OrderByDescending(x=>x.Date).ToListAsync();
        }

        public async Task<IEnumerable<HttpConversation>> GetConversationWithWebsite(string websiteUrl, int userId)
        {
             return await this._context.HttpConversations.Include(x=>x.WebSite).Where(x=>x.UserId==userId && x.WebSite.Url==websiteUrl).OrderByDescending(x=>x.Date).ToListAsync();
        }

        public async  Task<HttpConversation> GetHttpConversation(int httpConversationId)
        {
            return await this._context.HttpConversations.Include(x=>x.Request).ThenInclude(x=>x.ConctereHeaders).ThenInclude(x=>x.ConcreteHeaderValues).Include(x=>x.WebSite).Include(x=>x.Response).ThenInclude(x=>x.ConctereHeaders).ThenInclude(x=>x.ConcreteHeaderValues).FirstOrDefaultAsync(x=>x.Id==httpConversationId);
        }
    }
}