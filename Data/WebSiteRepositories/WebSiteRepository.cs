using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoWebPentester.API.Model;

using Microsoft.EntityFrameworkCore;

namespace AutoWebPentester.API.Data.WebSiteRepositories
{
    public class WebSiteRepository : IWebSiteRepository
    {
        private readonly DataContext context;

        public WebSiteRepository(DataContext context)
        {
            this.context = context;
        }

        public async Task<WebSite> AddWebSite(WebSite webSite,int userId)
        {
            if(await WebSiteExists(webSite)){
                var webSiteFromdb= await this.GetByUrl(webSite.Url);
                int webSiteId= webSiteFromdb.Id;
                webSite.Id=webSiteId;
                bool b= await UserWebSiteInterestAlreadyExists(userId,webSiteId);
              //bool b=false;
                if(!b){
                    
                     await context.UserWebSites.AddAsync(new UserWebSite{
                        UserId=userId,
                        WebSiteId=webSiteId,
                        Date=DateTime.Now
                });
                }else{
                    UserWebSite userwebSiteToUpdate=await this.context.UserWebSites.FirstOrDefaultAsync(x=>x.UserId==userId && x.WebSiteId==webSiteId);
                    userwebSiteToUpdate.Date=DateTime.Now; 
                }
            } else{
                webSite.UserWebSites= new List<UserWebSite>();
                webSite.UserWebSites.Add(new UserWebSite{
                    UserId=userId,
                    WebSiteId=webSite.Id,
                    Date=DateTime.Now
                });
                await context.WebSites.AddAsync(webSite);
                // context.SaveChanges();
                // await context.UserWebSites.AddAsync(new UserWebSite{
                //     UserId=userId,
                //     WebSiteId=webSite.Id,
                //     Date=DateTime.Now
                // });
            }

             context.SaveChanges();
            return webSite;
        }

        private async  Task<bool> UserWebSiteInterestAlreadyExists(int userId, int webSiteId)
        {
            return await  this.context.UserWebSites.AnyAsync(x=>x.UserId==userId && x.WebSiteId==webSiteId);
        }

        public async Task<IEnumerable<WebSite>> GetAll(int userId)
        {
          
            return  await context.WebSites
                    .Where(x=>x.UserWebSites.Any(y=>y.UserId==userId)).ToListAsync();

        }
         public async Task<IEnumerable<WebSite>> GetRecent(int userId)
        {
            return await this.context.WebSites
                      .Where(x=>x.UserWebSites.Any(y=>y.UserId==userId)).ToListAsync();

        }

       

        public async Task<WebSite> GetByUrl(string url)
        {
            return await context.WebSites.FirstOrDefaultAsync(x=>x.Url.Equals(url));
        }

       

        public Task<WebSite> Remove(WebSite webSite, int userId)
        {
            
            //this.context.RemoveRange()
            throw new System.NotImplementedException();
        }

        public async Task<bool> WebSiteExists(WebSite webSite)
        {
            return await  context.WebSites.AnyAsync(x=>x.Url.Equals(webSite.Url));
        }

        
    }
}