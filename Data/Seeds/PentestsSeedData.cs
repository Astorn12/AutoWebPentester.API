using System.Collections.Generic;
using AutoWebPentester.API.Logic.AllWithPentests.Caretakers;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs;
using AutoWebPentester.API.Logic.AllWithPentests.Inputs.JsonConvertClasses;
using AutoWebPentester.API.Logic.AllWithPentests.Resources;
using AutoWebPentester.API.Model;


namespace AutoWebPentester.API.Data.Seeds
{
    public class PentestsSeedData
    {
        public List<PentestSketch> GetPentestSeed(){


            
         
            return new List<PentestSketch>{
                
                new PentestSketch("Website availability",null,new WebsiteVerifier()),
                new PentestSketch("Subdomains searching",new List<Input>{new Input("Domains", new List<JClass>{new JStringArray("Domains")})},new SubdomainSearcher()),
                new PentestSketch("Http comments searching",null,new CommentsSearcher()),
                new PentestSketch("User forms searching",null,new InputsDetector()),
                new PentestSketch("Dns servers searching",null,new DnsServerSearcher()),
                new PentestSketch("Logins detector (by answer time)",new List<Input>{new Input("Potential logins", new List<JClass>{new JString("Subsite Url"),new JChoosen("Forms"),new JStringArray("Potential logins")})},new LoginsDetector()),
                new PentestSketch("Request iterator (by number)",new List<Input>{new Input("Number set", new List<JClass>{new JString("Url"), new JString("number set")})},new RequestsIterator()),
                new PentestSketch("Request iterator (by strings)",new List<Input>{new Input("String set", new List<JClass>{new JString("Url"), new JStringArray("string set")})},new RequestsIterator()),
                new PentestSketch("Forms Detector",new List<Input>{new Input("Choose forms", new List<JClass>{new JString("Subsite Url")})},new FromsDetector()),
                new PentestSketch("Sql allowed character detector",new List<Input>{new Input("Form", new List<JClass>{new JChoosen("Forms")})},new SqlAllowedCharacterTester())
                
            };
        }

        public List<ResourceSketch> GetResourceSketchesData(){
            return new List<ResourceSketch>{
                new ResourceSketch(1,"Verified",new EmptyContent(),false,"normal"),
                new ResourceSketch(2,"Subdomain",new Subdomain(),true,"tree"),
                new ResourceSketch(3,"Http comment",new HttpComment(),true,"list"),
                new ResourceSketch(4,"Dns server",new DnsServer(),true,"tick"),
                new ResourceSketch(5,"Form",new Form(),true,"normal"),
            };
        }
        


        public List<PenResData> GetPentestRequiredData(){
            return new List<PenResData>{
                new PenResData("Subdomains searching","Verified"),
                new PenResData("Http comments searching","Verified"),
                new PenResData("Dns servers searching","Verified"),
                new PenResData("Logins detector (by answer time)","Verified"),
                new PenResData("Request iterator (by number)","Verified"),
                new PenResData("Request iterator (by strings)","Verified"),
                new PenResData("Forms Detector","Verified"),
                new PenResData("Sql allowed character detector","Verified"),
            };
        }

        public List<PenResData> GetPentestProvidedData(){
            return new List<PenResData>{
                new PenResData("Website availability","Verified"),
                new PenResData("Subdomains searching","Subdomain"),
                new PenResData("Http comments searching","Http comment"),
                new PenResData("Dns servers searching","Verified")
            };
        }





        public class PenResData{
            public string PentestName { get; set; }
            public string ResourceName { get; set; }

            public PenResData(string pentestName, string resourceName)
            {
                this.PentestName=pentestName;
                this.ResourceName=resourceName;
            }
        }
    }
}