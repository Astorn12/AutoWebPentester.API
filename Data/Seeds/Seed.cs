using System.Collections.Generic;
using System.Linq;
using AutoWebPentester.API.Data.HeaderRepositories;
using AutoWebPentester.API.Model;
using Microsoft.EntityFrameworkCore;
using static AutoWebPentester.API.Data.Seeds.PentestSketchTagSeedData;

namespace AutoWebPentester.API.Data.Seeds
{
    public class Seed
    {
        // private DataContext _context;
        // private IHeaderRepository _repo;

        // public Seed(DataContext context, IHeaderRepository repo)
        // {
        //     _context = context;
        //     _repo = repo;
        // }

        public static void SeedHeaders(DataContext context){
            if(!context.Headers.Any()){
            HeaderSeedData headerSeed= new HeaderSeedData();
            context.Headers.AddRange(headerSeed.GetAll());
            context.SaveChanges();
            }
        }

        public static void SeedTagKinds(DataContext context){
            if(!context.TagKinds.Any()){
                TagKindsSeedData seedData= new TagKindsSeedData();
                context.TagKinds.AddRange(seedData.GetTagKinds());
                context.SaveChanges();
            }
        }

        public static void SeedPentests(DataContext context){
             // if(!context.Pentests.Any()){
                 context.PentestSketches.RemoveRange(context.PentestSketches.Where(x=>true).ToList());
                PentestsSeedData seedData= new PentestsSeedData();
                context.PentestSketches.AddRange(seedData.GetSeed());
                context.SaveChanges();
           // }
        }

        public static  void SeedPentestTags(DataContext context){
            context.PentestTags.RemoveRange(context.PentestTags.Where(x=>true).ToList());//cleaning database

            PentestSketchTagSeedData seedData= new PentestSketchTagSeedData();
             List<PentestTag> list= new List<PentestTag>();
            foreach(PenTagTmp tmp in seedData.GetAll()){
                PentestSketch pentest=  context.PentestSketches.FirstOrDefault(x=>x.Name.Equals(tmp.PentestName));
                Tag tag=  context.Tags.FirstOrDefault(x=>x.Name.Equals(tmp.TagName));
                list.Add(new PentestTag(pentest.Id, tag.Id));
            }

             context.AddRange(list);
            context.SaveChanges();
        }

        
    }
}